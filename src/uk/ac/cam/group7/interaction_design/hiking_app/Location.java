package uk.ac.cam.group7.interaction_design.hiking_app;

import java.nio.file.Path;

/**
 * Holds information about the location
 *  2 doubles for Lat and Long (final)
 *  String for name (possibly NULL)
 *  boolean for favourite
 *  @author dobrik
 */
public class Location {
    private final double latitude, longitude;
    private String name;
    private boolean isFavourite;
    private final Path path;


    /**
     * Constructor that takes no name parameter
     * and makes a new Location class with these coordinates
     * @param latitude
     * Latitude of location
     * @param longitude
     * Longitude of location
     * @param isFavourite
     * If location is a favourite
     * @param path
     * The path to the JSON file storing the raw forecast data
     */
    public Location(double latitude, double longitude, boolean isFavourite, Path path) {
        this.latitude= latitude;
        this.longitude = longitude;
        this.name = latitude + ", " + longitude;
        this.isFavourite = isFavourite;
        this.path = path;
    }

    /**
     * Constructor that takes no name parameter
     * and makes a new Location class with these coordinates
     * @param latitude
     * Latitude of location
     * @param longitude
     * Longitude of location
     * @param isFavourite
     * If location is a favourite
     * @param path
     * The path to the JSON file storing the raw forecast data
     */
    public Location(double latitude, double longitude, boolean isFavourite, Path path, String name) {
        this.latitude= latitude;
        this.longitude = longitude;
        this.name = name;
        this.isFavourite = isFavourite;
        this.path = path;
    }

    /**
     * Getter for latitude
     * @return
     * latitude (double)
     */
    public double getLatitude(){
        return latitude;
    }

    /**
     * Getter for longitude
     * @return
     * longitude (double)
     */
    public double getLongitude(){
        return longitude;
    }

    /**
     * Getter for name
     * @return
     * Name of location
     */
    public String getName() {
        return name;
    }

    /**
     * Getter for favourite
     * @return
     * boolean for isFavourite or not
     */
    public boolean isFavourite() {
        return isFavourite;
    }

    /**
     * Setter for the name of the location
     * @param _name
     * Name of the location
     */
    public void setName(String _name){name=_name;}

    /**
     * Set favourite location
     * @param favourite
     * boolean (false:notFav, true:Fav)
     */
    public void setFavourite(boolean favourite) {
        isFavourite = favourite;
    }

    public Path getPath() {
        return path;
    }

    /**
     * Autogenerated method for equals
     * @param o
     * Object to compare to
     * @return
     * true or false depending on equality
     */
    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;

        Location location = (Location) o;

        if (latitude != location.latitude) return false;
        if (longitude != location.longitude) return false;
        return name != null ? name.equals(location.name) : location.name == null;
    }

    @Override
    public int hashCode() {
        int result;
        long temp;
        temp = Double.doubleToLongBits(latitude);
        result = (int) (temp ^ (temp >>> 32));
        temp = Double.doubleToLongBits(longitude);
        result = 31 * result + (int) (temp ^ (temp >>> 32));
        result = 31 * result + (name != null ? name.hashCode() : 0);
        result = 31 * result + (isFavourite ? 1 : 0);
        result = 31 * result + (path != null ? path.hashCode() : 0);
        return result;
    }

    @Override
    public String toString() {
        if(name==null)return "("+latitude+","+longitude+")";
        return name;
    }
}


